ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)))
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "D.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+0.3)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "D.",
ylim = c(0, max(y.m.norm)+0.3)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
library("sft", lib.loc="/usr/local/lib/R/3.4/site-library")
data(dots)
data(dots)
dots
summary(dots)
sicGroup(dots)
sicGroup(dots)
216/36
216*12
216*18
9*18
library(tidyverse)
source('~/.active-rstudio-document')
setwd("~/github/sft-fraction/results/")
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
data1 = rawdata1 %>%
data1 = rawdata1 %>%
filter(correct==1)
library(tidyverse)
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
data1 = rawdata1 %>%
filter(correct==1)
names(rawdata1)
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr)
data1
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1)
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time)
data1 %>%
ggplot(aes(x=rt)) +
geom_density()
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1500)
data1
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5)
355/2
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1200)
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1000)
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
rawdata = read_csv("~/github/sft-fraction/results/data/subject-2a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time)
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
data %>%
ggplot(aes(x=rt)) %>%
geom_density()
data %>%
ggplot(aes(x=rt))+
geom_density()
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
1950/2160
rawdata = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
library(tidyverse)
rawdata = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
data %>%
ggplot(aes(x=rt))+
geom_density()
rawdata = read_csv("~/github/sft-fraction/results/data/subject-2a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
data %>%
ggplot(aes(x=rt))+
geom_density()
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < mean(rt)+3*sd(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(mRT = mean(rt))
data %>%
ggplot(aes(x=rt))+
geom_density()
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(mRT = mean(rt), sdRT = sd(rt))
data
hh = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="high" & denomSalience == "high")
hh = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="high" & denomSalience == "high") %>%
select(rt)
hh
hl = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="high" & denomSalience == "low") %>%
select(rt)
lh = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="low" & denomSalience == "high") %>%
select(rt)
ll = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="low" & denomSalience == "low") %>%
select(rt)
hh$rt
rts = sort(unique(c(hh$rt, hl$rt, lh$rt, ll$rt)))
rts
hh.ecdf = ecdf(hh$rt)
hh.ecdf = ecdf(hh$rt)
hl.ecdf = ecdf(hl$rt)
lh.ecdf = ecdf(lh$rt)
ll.ecdf = ecdf(ll$rt)
par(cex.main = 1.3, cex.lab = 1.3,
font.lab = 2, cex.axis = 1.2, bty = "n", las = 1)
plot(rts, rep(1,length(rts))-hh.ecdf(rts), type="l", lwd=2, lty=1,
ylab="", xlab="", axes=F,
main = "Serial exhaustive architecture")
lines(rts, rep(1,length(rts))-hl.ecdf(rts), lwd=2, lty=3 )
lines(rts, rep(1,length(rts))-lh.ecdf(rts), lwd=1, lty=1 )
lines(rts, rep(1,length(rts))-ll.ecdf(rts), lwd=1, lty=3)
axis(1)
mtext("RT (msec)", side = 1, line = 3, cex = 1.3, font = 2)
axis(2)
par(las = 0)
mtext("Probability", side = 2, line = 2.8, cex = 1.3, font = 2)
legend(x=800, y=0.8, legend=c("HH","HL","LH","LL"),lty=c(1,3,1,3), lwd=c(2,2,1,1))
plot(rts, rep(1,length(rts))-hh.ecdf(rts), type="l", lwd=2, lty=1,
ylab="", xlab="", axes=F,
main = "")
lines(rts, rep(1,length(rts))-hl.ecdf(rts), lwd=2, lty=3 )
lines(rts, rep(1,length(rts))-lh.ecdf(rts), lwd=1, lty=1 )
lines(rts, rep(1,length(rts))-ll.ecdf(rts), lwd=1, lty=3)
axis(1)
mtext("RT (msec)", side = 1, line = 3, cex = 1.3, font = 2)
axis(2)
par(las = 0)
mtext("Probability", side = 2, line = 2.8, cex = 1.3, font = 2)
legend(x=800, y=0.8, legend=c("HH","HL","LH","LL"),lty=c(1,3,1,3), lwd=c(2,2,1,1))
# plot SIC curve
sic = lh.ecdf(rts) + hl.ecdf(rts) - hh.ecdf(rts) - ll.ecdf(rts)
## compute Houpt-Townsend KS statistic
m = 1/(1/length(hh) + 1/length(hl) + 1/length(lh) + 1/length(ll))
Dplus = max(0,sic)
p.Dplus = exp(-2*m*Dplus^2)
Dminus = abs(min(0,sic))
p.Dminus = exp(-2*m*Dminus^2)
par(cex.main = 1.3, cex.lab = 1.3,
font.lab = 2, cex.axis = 1.2, bty = "n", las = 1)
plot(rts, sic, type="l", lwd=1,
ylim=c(-0.4,0.4),
xlab="", ylab="", axes=F)
abline(h=0, lty=2)
axis(1)
mtext("RT (msec)", side = 1, line = 3, cex = 1.3, font = 2)
axis(2)
par(las = 0)
mtext("SIC", side = 2, line = 2.8, cex = 1.3, font = 2)
text(1.5,0.4,sprintf("D+ = %.3f, p = %.3f", Dplus, p.Dplus), pos=4)
text(1.5,0.3,sprintf("D- = %.3f, p = %.3f", Dminus, p.Dminus), pos=4)
text(1200,0.4,sprintf("D+ = %.3f, p = %.3f", Dplus, p.Dplus), pos=4)
text(1200,0.3,sprintf("D- = %.3f, p = %.3f", Dminus, p.Dminus), pos=4)
text(800,0.4,sprintf("D+ = %.3f, p = %.3f", Dplus, p.Dplus), pos=4)
text(800,0.3,sprintf("D- = %.3f, p = %.3f", Dminus, p.Dminus), pos=4)
rawdata = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < mean(rt)+3*sd(rt))
hh = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="high" & denomSalience == "high") %>%
select(rt)
hl = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="high" & denomSalience == "low") %>%
select(rt)
lh = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="low" & denomSalience == "high") %>%
select(rt)
ll = data %>%
filter(numerator > 5 & denominator > 5) %>%
filter(numSalience=="low" & denomSalience == "low") %>%
select(rt)
rts = sort(unique(c(hh$rt, hl$rt, lh$rt, ll$rt)))
hh.ecdf = ecdf(hh$rt)
hl.ecdf = ecdf(hl$rt)
lh.ecdf = ecdf(lh$rt)
ll.ecdf = ecdf(ll$rt)
par(cex.main = 1.3, cex.lab = 1.3,
font.lab = 2, cex.axis = 1.2, bty = "n", las = 1)
plot(rts, rep(1,length(rts))-hh.ecdf(rts), type="l", lwd=2, lty=1,
ylab="", xlab="", axes=F,
main = "")
lines(rts, rep(1,length(rts))-hl.ecdf(rts), lwd=2, lty=3 )
lines(rts, rep(1,length(rts))-lh.ecdf(rts), lwd=1, lty=1 )
lines(rts, rep(1,length(rts))-ll.ecdf(rts), lwd=1, lty=3)
axis(1)
mtext("RT (msec)", side = 1, line = 3, cex = 1.3, font = 2)
axis(2)
par(las = 0)
mtext("Probability", side = 2, line = 2.8, cex = 1.3, font = 2)
legend(x=800, y=0.8, legend=c("HH","HL","LH","LL"),lty=c(1,3,1,3), lwd=c(2,2,1,1))
# plot SIC curve
sic = lh.ecdf(rts) + hl.ecdf(rts) - hh.ecdf(rts) - ll.ecdf(rts)
## compute Houpt-Townsend KS statistic
m = 1/(1/length(hh) + 1/length(hl) + 1/length(lh) + 1/length(ll))
Dplus = max(0,sic)
p.Dplus = exp(-2*m*Dplus^2)
Dminus = abs(min(0,sic))
p.Dminus = exp(-2*m*Dminus^2)
par(cex.main = 1.3, cex.lab = 1.3,
font.lab = 2, cex.axis = 1.2, bty = "n", las = 1)
plot(rts, sic, type="l", lwd=1,
ylim=c(-0.4,0.4),
xlab="", ylab="", axes=F)
abline(h=0, lty=2)
axis(1)
mtext("RT (msec)", side = 1, line = 3, cex = 1.3, font = 2)
axis(2)
par(las = 0)
mtext("SIC", side = 2, line = 2.8, cex = 1.3, font = 2)
text(800,0.4,sprintf("D+ = %.3f, p = %.3f", Dplus, p.Dplus), pos=4)
text(800,0.3,sprintf("D- = %.3f, p = %.3f", Dminus, p.Dminus), pos=4)
text(600,0.4,sprintf("D+ = %.3f, p = %.3f", Dplus, p.Dplus), pos=4)
text(600,0.3,sprintf("D- = %.3f, p = %.3f", Dminus, p.Dminus), pos=4)
