frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, rep(-10,length(x)), type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm))
)
lines(density(means), lty=2)
max(density(means))
lines(density(means)/2, lty=2)
plot(x, rep(-10,length(x)), type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+1)
)
lines(density(means), lty=2)
plot(x, rep(-10,length(x)), type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
lines(density(means), lty=2)
axis(side=2, at=seq(0,3,1), las=2)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)))
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, rep(-10,length(x)), type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
lines(density(means), lty=2)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)))
?search.means
??search.means
search.means()
source("https://github.com/PerceptionAndCognitionLab/ctx-indiff/blob/public/shared/functions/lib_2.R")
source("https://raw.githubusercontent.com/PerceptionAndCognitionLab/ctx-indiff/public/shared/functions/lib_2.R")
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
View(search.means)
# simulate truncated normal sampling distribution
means = search.means(boundaries=c(0,1), optimum=0.5, cutoff=0.0001, a=0, b=Inf, sigma=0.4)
sd.t = search.var(boundaries=c(0,1), optimum=0.4, a=0, b=Inf, mu=0.5)
# simulate truncated normal sampling distribution
means = search.means(boundaries=c(0,1), optimum=0.5, cutoff=0.00001, a=0, b=Inf, sigma=0.4)
sd.t = search.var(boundaries=c(0,1), optimum=0.4, cutoff=0.00001, a=0, b=Inf, mu=0.5)
sd.t = search.var(boundaries=c(0,1), optimum=0.4, cutoff=0.00001, a=0, b=1e12, mu=0.5)
# simulate truncated normal sampling distribution
means = search.means(boundaries=c(0,1), optimum=0.5, cutoff=0.00001, a=0, b=Inf, sigma=0.4)
sd.t = search.var(boundaries=c(0,1), optimum=0.4, cutoff=0.00001, a=0, b=1e12, mu=0.5)
View(search.means)
means = numeric(1000)
for (i in 1:1000){
means[i] = mean(sample(x=pop, size=16))
}
mean(means)
pop = rtnorm(n=1e6, mean=means, sd=sd.t, lower=0, upper = Inf)
sampMeans = numeric(1000)
for (i in 1:1000){
sampMeans[i] = mean(sample(x=pop, size=16))
}
mean(sampMeans)
# simulate truncated normal sampling distribution
means = search.means(boundaries=c(0,1), optimum=0.5, cutoff=0.00001, a=0, b=Inf, sigma=0.4)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.4, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.37, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
mean(y.t.norm)
sd(y.t.norm)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
mean(y.t.norm)
?dtnorm
y = rtnorm(n=1e6, mean=0.5, sd=0.5)
y = rtnorm(n=1e6, mean=0.5, sd=0.5, a=0, b=Inf)
y = rtnorm(n=1e6, mean=0.5, sd=0.5, lower=0)
mean(y)
y = rtnorm(n=1e6, mean=0.37, sd=0.5, lower=0)
mean(y)
y = rtnorm(n=1e6, mean=0.376, sd=0.505, lower=0)
mean(y)
sd(y)
View(MeanNormalTruncated)
View(r.t.invgamma)
View(search.means)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)))
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+2)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "D.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
x = seq(from=-1.4, to=2.5, by=0.001)
par(mfrow=c(2,2), mar=c(4,4.5,1,1), mgp=c(2,0.7,0))
# normal population and sampling distribution (based on n=16)
y.norm = dnorm(x, mean=0.5, sd=0.5)
y.m.norm = dnorm(x, mean=0.5, sd=0.125)
# truncated normal density
y.t.norm = dtnorm(x, mean=0.5, sd=0.5, lower=0)
plot(x, y.t.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "A.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.norm, type="l",
frame.plot=FALSE,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "B.",
ylim = c(0, max(y.m.norm))
)
axis(side=2, at=seq(0,3,1), las=2)
abline(v=0, col="gray80")
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "C.",
ylim = c(0, max(y.m.norm)+0.3)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
plot(x, y.m.norm, type="l",
frame.plot=FALSE,
lty=2,
ylab = "Density",
xlab = expression(paste("Effect ", delta)),
yaxt = 'n',
main = "D.",
ylim = c(0, max(y.m.norm)+0.3)
)
axis(side=2, at=seq(0,4,1), las=2)
abline(v=0, col="gray80")
lines(x=c(0.5,0.5), y=c(0,max(y.m.norm)), lwd=1.5)
library("sft", lib.loc="/usr/local/lib/R/3.4/site-library")
data(dots)
data(dots)
dots
summary(dots)
sicGroup(dots)
sicGroup(dots)
216/36
216*12
216*18
9*18
library(tidyverse)
source('~/.active-rstudio-document')
setwd("~/github/sft-fraction/results/")
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
data1 = rawdata1 %>%
data1 = rawdata1 %>%
filter(correct==1)
library(tidyverse)
rawdata1 = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
data1 = rawdata1 %>%
filter(correct==1)
names(rawdata1)
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr)
data1
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1)
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time)
data1 %>%
ggplot(aes(x=rt)) +
geom_density()
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1500)
data1
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5)
355/2
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1200)
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# clean data file
data1 = rawdata1 %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < 1000)
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# look at selective influence
data1 %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
rawdata = read_csv("~/github/sft-fraction/results/data/subject-2a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time)
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
data %>%
ggplot(aes(x=rt)) %>%
geom_density()
data %>%
ggplot(aes(x=rt))+
geom_density()
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = mean(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(meanRT = median(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
1950/2160
rawdata = read_csv("~/github/sft-fraction/results/data/subject-1a.csv")
# clean data file
data = rawdata %>%
select(correct, denomSalience, numSalience, numerator, denominator, response_time, subject_nr) %>%
filter(correct==1) %>%
mutate(rt = response_time) %>%
filter(rt > 200 & rt < median(rt)+6*mad(rt))
# look at selective influence
data %>%
filter(numerator > 5 & denominator > 5) %>%
group_by(denomSalience, numSalience) %>%
summarize(medRT = median(rt))
